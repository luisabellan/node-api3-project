"use strict";var express=require("express"),cors=require("cors"),router=express.Router(),posts=require("../posts/postDb"),users=require("../users/userDb");function validateUserId(){return function(e,s,o){users.getById(e.params.id).then(function(t){t?(e.user=t,o()):s.status(404).json({message:"invalid user id"})}).catch(function(t){o(t)})}}function validatePost(){return function(t,e,s){return t.body?t.body.text?void 0:e.status(400).json({message:"missing required text field"}):e.status(400).json({message:"missing post data"})}}router.post("",function(t,e){if(!t.body.title||!t.body.contents)return e.status(400).json({errorMessage:"Please provide title and contents for the post."});posts.insert(t.body).then(function(t){e.status(201).json(t)}).catch(function(t){return console.log(t),e.status(500).json({error:"There was an error while saving the post to the database"})})}),router.post("/:id/comments",function(t,e){console.log(t.params.id);var s=t.params.id;if(t.body.post_id=s,!t.body.text)return e.status(400).json({errorMessage:"Please provide text for the comment."});if(0===posts.findPostComments(t.body.post_id).length)return e.status(404).json({message:"The post with the specified ID does not exist."});try{posts.insertComment(t.body).then(function(t){return e.status(201).json(t)}).catch(function(t){e.status(404).json({message:"The post with the specified ID does not exist."})})}catch(t){return console.log(t),e.status(500).json({error:"There was an error while saving the comment to the database"})}}),router.get("",function(t,e){posts.get().then(function(t){e.status(200).json(t)}).catch(function(t){return console.log(t),e.status(500).json({error:"The posts information could not be retrieved."})})}),router.get("/:id",validateUserId(),function(t,e){posts.getById(t.params.id).then(function(t){return t?e.status(200).json(t):e.status(404).json({message:"The post with the specified ID does not exist."})}).catch(function(t){return console.log(t),e.status(500).json({error:"The post information could not be retrieved."})})}),router.delete("/:id",validateUserId(),function(t,e){users.remove(t.params.id).then(function(t){e.status(200).json({message:"The user has been deleted"})}).catch(function(t){next(t)})}),router.put("/:id",validateUserId(),function(t,e){if(!t.body.title||!t.body.contents)return e.status(400).json({errorMessage:"Please provide title and contents for the post."})}),module.exports=router;